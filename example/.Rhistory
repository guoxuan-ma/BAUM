}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
working
n
centers = which.max(degree(g))
working = centers
decay = 0
new_centers = c()
meta = centers
meta
n = which(V(g) == neighbors(g, meta))
n
g
vcount(g)
V(g) == neighbors(g, meta)
n = which(V(g) %in% neighbors(g, meta))
n
centers = which.max(degree(g))
working = centers
decay = 0
while (TRUE) {
new_centers = c()
for (meta in centers) {
n = which(V(g) %in% neighbors(g, meta))
selected = sample(length(n), size = round(length(n) * 0.8^decay))
if (length(selected) == 0) {
next
} else {
selected = n[selected]
new_centers = c(new_centers, selected)
working = c(working, selected)
}
}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
working
length(working)
centers = which.max(degree(g))
working = centers
decay = 0
while (TRUE) {
new_centers = c()
for (meta in centers) {
n = which(V(g) %in% neighbors(g, meta))
selected = sample(length(n), size = round(length(n) * 0.5^decay))
if (length(selected) == 0) {
next
} else {
selected = n[selected]
new_centers = c(new_centers, selected)
working = c(working, selected)
}
}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
length(working)
g_sub = subgraph(g, working)
g_sub = induced_subgraph(g, working)
plot(g_sub)
# select a subset of metabolites
centers = which.max(degree(g))
centers
# trim feature_meta
feature_meta_sub = feature_meta[, working]
feature_meta_sub
feature_with_link_to_meta = (rowSums(feature_meta_sub) > 0)
feature_meta_sub = feature_meta_sub[feature_with_link_to_meta, ]
dim(feature_meta_sub)
feature_meta_sub
rowSums(feature_meta_sub)
# reduce r
r_sub = test_stats_dcorT[feature_with_link_to_meta]
para_samples = BAUM(r_sub, Q, g_sub, num_samples = 5000)
# select a subset of metabolites
centers = which.max(degree(g))
working = centers
decay = 0
while (TRUE) {
new_centers = c()
for (meta in centers) {
n = which(V(g) %in% neighbors(g, meta))
selected = sample(length(n), size = round(length(n) * 0.5^decay))
if (length(selected) == 0) {
next
} else {
selected = n[selected]
new_centers = c(new_centers, selected)
working = c(working, selected)
}
}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
working = unique(working)
g_sub = induced_subgraph(g, working)
plot(g_sub)
# reduce feature_meta
feature_meta_sub = feature_meta[, working]
feature_with_link_to_meta = (rowSums(feature_meta_sub) > 0)
feature_meta_sub = feature_meta_sub[feature_with_link_to_meta, ]
# reduce r
r_sub = test_stats_dcorT[feature_with_link_to_meta]
Q = feature_meta_sub / rowSums(feature_meta_sub)
para_samples = BAUM(r_sub, Q, g_sub, num_samples = 5000)
FDR_threshold(para_samples$z[begin:end, ], 0.2)
begin = 1001
end = 5000
FDR_threshold(para_samples$z[begin:end, ], 0.2)
fdr = p2fdr(para_samples$z[begin:end, ])
pred_z = (colMeans(para_samples$z[begin:end, ]) >= FDR_threshold(para_samples$z[begin:end, ], 0.2)) + 0
coords = layout_(g_sub, nicely())
plot(g_sub,
layout = coords,
vertex.color = c('orange', 'red')[pred_z + 1],
vertex.size = 3,
vertex.label = NA)
# select a subset of metabolites
centers = which.max(degree(g))
working = centers
decay = 0
while (TRUE) {
new_centers = c()
for (meta in centers) {
n = which(V(g) %in% neighbors(g, meta))
selected = sample(length(n), size = round(length(n) * 0.8^decay))
if (length(selected) == 0) {
next
} else {
selected = n[selected]
new_centers = c(new_centers, selected)
working = c(working, selected)
}
}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
working = unique(working)
g_sub = induced_subgraph(g, working)
plot(g_sub)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 3,
vertex.label = NA)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 4,
vertex.label = NA)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 4,
vertex.label = NA,
edge.size = 2)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 4,
vertex.label = NA,
edge.width = 2)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 4,
vertex.label = NA,
edge.width = 0.5)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 4,
vertex.label = NA,
vertex.frame = NA,
edge.width = 0.5)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 4,
vertex.label = NA,
vertex.frame = "white",
edge.width = 0.5)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 4,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
# select a subset of metabolites
k = vcount(g)
d = degree(g)
log_d = log(d + 2)
center_prob = log_d / sum(log_d)
is_to_feature = (colSums(feature_meta) > 0) + 0
meta_to_feature = which(is_to_feature == 1)
n_meta_to_feature = sum(is_to_feature)
centers = sample(meta_to_feature, size = min(n_meta_to_feature, ceiling(0.1 * k)),
prob = center_prob[is_to_feature == 1], replace = F)
working = centers
decay = 0
while (TRUE) {
new_centers = c()
for (meta in centers) {
n = which(V(g) %in% neighbors(g, meta))
selected = sample(length(n), size = round(length(n) * 0.8^decay))
if (length(selected) == 0) {
next
} else {
selected = n[selected]
new_centers = c(new_centers, selected)
working = c(working, selected)
}
}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
working = unique(working)
g_sub = induced_subgraph(g, working)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
length(working)
working
# select a subset of metabolites
k = vcount(g)
d = degree(g)
log_d = log(d + 2)
center_prob = log_d / sum(log_d)
is_to_feature = (colSums(feature_meta) > 0) + 0
meta_to_feature = which(is_to_feature == 1)
n_meta_to_feature = sum(is_to_feature)
centers = sample(meta_to_feature, size = min(n_meta_to_feature, ceiling(0.1 * k)),
prob = center_prob[is_to_feature == 1], replace = F)
working = centers
working
centers = sample(meta_to_feature, size = min(n_meta_to_feature, ceiling(0.01 * k)),
prob = center_prob[is_to_feature == 1], replace = F)
centers
k = vcount(g)
d = degree(g)
log_d = log(d + 2)
center_prob = log_d / sum(log_d)
is_to_feature = (colSums(feature_meta) > 0) + 0
meta_to_feature = which(is_to_feature == 1)
n_meta_to_feature = sum(is_to_feature)
centers = sample(meta_to_feature, size = min(n_meta_to_feature, ceiling(0.001 * k)),
prob = center_prob[is_to_feature == 1], replace = F)
working = centers
working
k = vcount(g)
d = degree(g)
log_d = log(d + 2)
center_prob = log_d / sum(log_d)
is_to_feature = (colSums(feature_meta) > 0) + 0
meta_to_feature = which(is_to_feature == 1)
n_meta_to_feature = sum(is_to_feature)
centers = sample(meta_to_feature, size = min(n_meta_to_feature, ceiling(0.005 * k)),
prob = center_prob[is_to_feature == 1], replace = F)
working = centers
decay = 0
while (TRUE) {
new_centers = c()
for (meta in centers) {
n = which(V(g) %in% neighbors(g, meta))
selected = sample(length(n), size = round(length(n) * 0.8^decay))
if (length(selected) == 0) {
next
} else {
selected = n[selected]
new_centers = c(new_centers, selected)
working = c(working, selected)
}
}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
working = unique(working)
g_sub = induced_subgraph(g, working)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
vcount(g_sub)
# reduce feature_meta
feature_meta_sub = feature_meta[, working]
feature_with_link_to_meta = (rowSums(feature_meta_sub) > 0)
feature_meta_sub = feature_meta_sub[feature_with_link_to_meta, ]
# reduce r
r_sub = test_stats_dcorT[feature_with_link_to_meta]
Q = feature_meta_sub / rowSums(feature_meta_sub)
para_samples = BAUM(r_sub, Q, g_sub, num_samples = 1000)
begin = 1001
end = 5000
FDR_threshold(para_samples$z[begin:end, ], 0.2)
begin = 501
end = 1000
FDR_threshold(para_samples$z[begin:end, ], 0.2)
fdr = p2fdr(para_samples$z[begin:end, ])
pred_z = (colMeans(para_samples$z[begin:end, ]) >= FDR_threshold(para_samples$z[begin:end, ], 0.2)) + 0
coords = layout_(g_sub, nicely())
plot(g_sub,
layout = coords,
vertex.color = c('orange', 'red')[pred_z + 1],
vertex.size = 3,
vertex.label = NA)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
plot(g_sub,
layout = coords,
vertex.color = c("palegreen3", "salmon")[pred_z + 1],
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
set.seed(2023)
# select a subset of metabolites
k = vcount(g)
d = degree(g)
log_d = log(d + 2)
center_prob = log_d / sum(log_d)
is_to_feature = (colSums(feature_meta) > 0) + 0
meta_to_feature = which(is_to_feature == 1)
n_meta_to_feature = sum(is_to_feature)
centers = sample(meta_to_feature, size = min(n_meta_to_feature, ceiling(0.005 * k)),
prob = center_prob[is_to_feature == 1], replace = F)
working = centers
decay = 0
while (TRUE) {
new_centers = c()
for (meta in centers) {
n = which(V(g) %in% neighbors(g, meta))
selected = sample(length(n), size = round(length(n) * 0.8^decay))
if (length(selected) == 0) {
next
} else {
selected = n[selected]
new_centers = c(new_centers, selected)
working = c(working, selected)
}
}
if (length(working) > 100) {
break
}
centers = new_centers
decay = decay + 1
}
working = unique(working)
g_sub = induced_subgraph(g, working)
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
coords = layout_(g_sub, nicely())
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
coords = layout_(g_sub, nicely())
plot(g_sub,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
# reduce feature_meta
feature_meta_sub = feature_meta[, working]
feature_with_link_to_meta = (rowSums(feature_meta_sub) > 0)
feature_meta_sub = feature_meta_sub[feature_with_link_to_meta, ]
# reduce r
r_sub = test_stats_dcorT[feature_with_link_to_meta]
Q = feature_meta_sub / rowSums(feature_meta_sub)
para_samples = BAUM(r_sub, Q, g_sub, num_samples = 1000)
begin = 501
end = 1000
FDR_threshold(para_samples$z[begin:end, ], 0.2)
fdr = p2fdr(para_samples$z[begin:end, ])
pred_z = (colMeans(para_samples$z[begin:end, ]) >= FDR_threshold(para_samples$z[begin:end, ], 0.2)) + 0
coords = layout_(g_sub, nicely())
plot(g_sub,
layout = coords,
vertex.color = c("palegreen3", "salmon")[pred_z + 1],
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
g = g_sub
feature_meta = feature_meta_sub
r = r_sub
save(g, feature_meta, r, "toy_example.rdata")
save(g, feature_meta, r, "file = toy_example.rdata")
save(g, feature_meta, r, file = "toy_example.rdata")
getwd
getwd()
# matching uncertainty estimation
p = dim(Q)[1]
k = dim(Q)[2]
pred_Lambda = matrix(0, nrow = p, ncol = k)
pred_r_vec = matrix(0, nrow = end - begin + 1, ncol = p)
for (s in begin:end) {
pred_Lambda = pred_Lambda + para_samples$Lambda[[s]] / (end - begin + 1)
pred_r_vec[s-begin+1, ] = as.vector(para_samples$Lambda[[s]] %*% ifelse(para_samples$z[s, ],
para_samples$eta_1[s, ],
para_samples$eta_0[s]))
}
pred_Lambda = as.matrix(pred_Lambda)
pred_Lambda
hist(pred_Lambda[pred_Lambda != 0])
# loading libraries
library(BAUM)
library(igraph)
library(Matrix)
# load data
load("toy_example.Rdata")
# we construct matrix Q, the prior matching confidence
# here we assume feature-metabolite has equal matching confidence, which is for illustration but not necessary
Q = feature_meta / rowSums(feature_meta)
# run BAUM for 1000 MCMC steps
para_samples = BAUM(r, Q, g, num_samples = 1000)
# first 500 steps for burn-in
begin = 501
end = 1000
# FDR threshold at alpha = 0.2 on metabolites posterior inclusion probability
FDR_threshold(para_samples$z[begin:end, ], 0.2)
# metabolites fdr
fdr = p2fdr(para_samples$z[begin:end, ])
# prediction on z: whether or not a metabolite is significant
pred_z = (colMeans(para_samples$z[begin:end, ]) >= FDR_threshold(para_samples$z[begin:end, ], 0.2)) + 0
# plot network structure
coords = layout_(g, nicely())
plot(g,
layout = coords,
vertex.color = "palegreen3",
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
# plot prediction results
plot(g,
layout = coords,
vertex.color = c("palegreen3", "salmon")[pred_z + 1],
vertex.size = 5,
vertex.label = NA,
vertex.frame.color = "white",
edge.width = 0.5)
# matching uncertainty estimation
p = dim(Q)[1]
k = dim(Q)[2]
pred_Lambda = matrix(0, nrow = p, ncol = k)
pred_r_vec = matrix(0, nrow = end - begin + 1, ncol = p)
for (s in begin:end) {
pred_Lambda = pred_Lambda + para_samples$Lambda[[s]] / (end - begin + 1)
pred_r_vec[s-begin+1, ] = as.vector(para_samples$Lambda[[s]] %*% ifelse(para_samples$z[s, ],
para_samples$eta_1[s, ],
para_samples$eta_0[s]))
}
pred_Lambda = as.matrix(pred_Lambda)
